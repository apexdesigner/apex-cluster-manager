{
  "PodDisruptionBudget": {
	"elasticsearch-master-pdb": {
	  "apiVersion": "policy/v1",
	  "kind": "PodDisruptionBudget",
	  "metadata": {
		"name": "elasticsearch-master-pdb"
	  },
	  "spec": {
		"maxUnavailable": 1,
		"selector": {
		  "matchLabels": {
			"app": "elasticsearch-master"
		  }
		}
	  }
	}
  },
  "ServiceAccount": {
	"camunda-zeebe-gateway-gateway": {
	  "apiVersion": "v1",
	  "kind": "ServiceAccount",
	  "metadata": {
		"name": "camunda-zeebe-gateway-gateway",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe-gateway",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-gateway-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-gateway"
		}
	  }
	},
	"camunda-zeebe": {
	  "apiVersion": "v1",
	  "kind": "ServiceAccount",
	  "metadata": {
		"name": "camunda-zeebe",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-broker"
		}
	  }
	}
  },
  "ConfigMap": {
	"camunda-zeebe-gateway-gateway": {
	  "kind": "ConfigMap",
	  "metadata": {
		"name": "camunda-zeebe-gateway-gateway",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe-gateway",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-gateway-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-gateway"
		}
	  },
	  "apiVersion": "v1",
	  "data": {
		"gateway-log4j2.xml": ""
	  }
	},
	"camunda-zeebe": {
	  "kind": "ConfigMap",
	  "metadata": {
		"name": "camunda-zeebe",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-broker"
		}
	  },
	  "apiVersion": "v1",
	  "data": {
		"startup.sh": "#!/usr/bin/env bash\nset -eux -o pipefail\n\nexport ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-${K8S_NAME##*-}}\n\nif [ \"$(ls -A /exporters/)\" ]; then\n  mkdir /usr/local/zeebe/exporters/\n  cp -a /exporters/*.jar /usr/local/zeebe/exporters/\nelse\n  echo \"No exporters available.\"\nfi\n\nenv\nexec /usr/local/zeebe/bin/broker\n",
		"broker-log4j2.xml": ""
	  }
	}
  },
  "Service": {
	"elasticsearch-master": {
	  "kind": "Service",
	  "apiVersion": "v1",
	  "metadata": {
		"name": "elasticsearch-master",
		"labels": {
		  "heritage": "Helm",
		  "release": "camunda",
		  "chart": "elasticsearch",
		  "app": "elasticsearch-master"
		},
		"annotations": {}
	  },
	  "spec": {
		"type": "ClusterIP",
		"selector": {
		  "release": "camunda",
		  "chart": "elasticsearch",
		  "app": "elasticsearch-master"
		},
		"publishNotReadyAddresses": false,
		"ports": [
		  {
			"name": "http",
			"protocol": "TCP",
			"port": 9200
		  },
		  {
			"name": "transport",
			"protocol": "TCP",
			"port": 9300
		  }
		]
	  }
	},
	"elasticsearch-master-headless": {
	  "kind": "Service",
	  "apiVersion": "v1",
	  "metadata": {
		"name": "elasticsearch-master-headless",
		"labels": {
		  "heritage": "Helm",
		  "release": "camunda",
		  "chart": "elasticsearch",
		  "app": "elasticsearch-master"
		},
		"annotations": {
		  "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
		}
	  },
	  "spec": {
		"clusterIP": "None",
		"publishNotReadyAddresses": true,
		"selector": {
		  "app": "elasticsearch-master"
		},
		"ports": [
		  {
			"name": "http",
			"port": 9200
		  },
		  {
			"name": "transport",
			"port": 9300
		  }
		]
	  }
	},
	"camunda-zeebe-gateway": {
	  "apiVersion": "v1",
	  "kind": "Service",
	  "metadata": {
		"name": "camunda-zeebe-gateway",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe-gateway",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-gateway-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-gateway"
		},
		"annotations": null
	  },
	  "spec": {
		"type": "ClusterIP",
		"selector": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe-gateway",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "app.kubernetes.io/component": "zeebe-gateway"
		},
		"ports": [
		  {
			"port": 9600,
			"protocol": "TCP",
			"name": "http"
		  },
		  {
			"port": 26500,
			"protocol": "TCP",
			"name": "gateway"
		  }
		]
	  }
	},
	"camunda-zeebe": {
	  "apiVersion": "v1",
	  "kind": "Service",
	  "metadata": {
		"name": "camunda-zeebe",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-broker"
		},
		"annotations": {}
	  },
	  "spec": {
		"clusterIP": "None",
		"publishNotReadyAddresses": true,
		"type": "ClusterIP",
		"ports": [
		  {
			"port": 9600,
			"protocol": "TCP",
			"name": "http"
		  },
		  {
			"port": 26502,
			"protocol": "TCP",
			"name": "internal"
		  },
		  {
			"port": 26501,
			"protocol": "TCP",
			"name": "command"
		  }
		],
		"selector": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "app.kubernetes.io/component": "zeebe-broker"
		}
	  }
	}
  },
  "Deployment": {
	"camunda-zeebe-gateway": {
	  "apiVersion": "apps/v1",
	  "kind": "Deployment",
	  "metadata": {
		"name": "camunda-zeebe-gateway",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe-gateway",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-gateway-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-gateway"
		},
		"annotations": {}
	  },
	  "spec": {
		"replicas": 1,
		"selector": {
		  "matchLabels": {
			"app": "camunda-platform",
			"app.kubernetes.io/name": "zeebe-gateway",
			"app.kubernetes.io/instance": "camunda",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/part-of": "camunda-platform",
			"app.kubernetes.io/component": "zeebe-gateway"
		  }
		},
		"template": {
		  "metadata": {
			"labels": {
			  "app": "camunda-platform",
			  "app.kubernetes.io/name": "zeebe-gateway",
			  "app.kubernetes.io/instance": "camunda",
			  "app.kubernetes.io/managed-by": "Helm",
			  "app.kubernetes.io/part-of": "camunda-platform",
			  "helm.sh/chart": "zeebe-gateway-8.0.10",
			  "app.kubernetes.io/version": "8.0.0",
			  "app.kubernetes.io/component": "zeebe-gateway"
			},
			"annotations": {}
		  },
		  "spec": {
			"imagePullSecrets": [],
			"containers": [
			  {
				"name": "zeebe-gateway",
				"image": "camunda/zeebe:8.0.0",
				"imagePullPolicy": "IfNotPresent",
				"ports": [
				  {
					"containerPort": 9600,
					"name": "http"
				  },
				  {
					"containerPort": 26500,
					"name": "gateway"
				  },
				  {
					"containerPort": 26502,
					"name": "internal"
				  }
				],
				"env": [
				  {
					"name": "ZEEBE_STANDALONE_GATEWAY",
					"value": "true"
				  },
				  {
					"name": "ZEEBE_GATEWAY_CLUSTER_CLUSTERNAME",
					"value": "camunda-zeebe"
				  },
				  {
					"name": "ZEEBE_GATEWAY_CLUSTER_MEMBERID",
					"valueFrom": {
					  "fieldRef": {
						"fieldPath": "metadata.name"
					  }
					}
				  },
				  {
					"name": "ZEEBE_LOG_LEVEL",
					"value": "info"
				  },
				  {
					"name": "JAVA_TOOL_OPTIONS",
					"value": "-XX:+ExitOnOutOfMemoryError"
				  },
				  {
					"name": "ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT",
					"value": "camunda-zeebe:26502"
				  },
				  {
					"name": "ZEEBE_GATEWAY_NETWORK_HOST",
					"value": "0.0.0.0"
				  },
				  {
					"name": "ZEEBE_GATEWAY_NETWORK_PORT",
					"value": "26500"
				  },
				  {
					"name": "ZEEBE_GATEWAY_CLUSTER_HOST",
					"valueFrom": {
					  "fieldRef": {
						"fieldPath": "status.podIP"
					  }
					}
				  },
				  {
					"name": "ZEEBE_GATEWAY_CLUSTER_PORT",
					"value": "26502"
				  },
				  {
					"name": "ZEEBE_GATEWAY_MONITORING_HOST",
					"value": "0.0.0.0"
				  },
				  {
					"name": "ZEEBE_GATEWAY_MONITORING_PORT",
					"value": "9600"
				  }
				],
				"volumeMounts": null,
				"readinessProbe": {
				  "tcpSocket": {
					"port": "gateway"
				  },
				  "initialDelaySeconds": 20,
				  "periodSeconds": 5
				},
				"resources": {
				  "limits": {
					"cpu": "400m",
					"memory": "450Mi"
				  },
				  "requests": {
					"cpu": "400m",
					"memory": "450Mi"
				  }
				}
			  }
			],
			"volumes": [
			  {
				"name": "config",
				"configMap": {
				  "name": "camunda-zeebe-gateway-gateway",
				  "defaultMode": 484
				}
			  }
			],
			"affinity": {
			  "podAntiAffinity": {
				"requiredDuringSchedulingIgnoredDuringExecution": [
				  {
					"labelSelector": {
					  "matchExpressions": [
						{
						  "key": "app.kubernetes.io/component",
						  "operator": "In",
						  "values": [
							"zeebe-gateway"
						  ]
						}
					  ]
					},
					"topologyKey": "kubernetes.io/hostname"
				  }
				]
			  }
			}
		  }
		}
	  }
	}
  },
  "StatefulSet": {
	"elasticsearch-master": {
	  "apiVersion": "apps/v1",
	  "kind": "StatefulSet",
	  "metadata": {
		"name": "elasticsearch-master",
		"labels": {
		  "heritage": "Helm",
		  "release": "camunda",
		  "chart": "elasticsearch",
		  "app": "elasticsearch-master"
		},
		"annotations": {
		  "esMajorVersion": "7"
		}
	  },
	  "spec": {
		"serviceName": "elasticsearch-master-headless",
		"selector": {
		  "matchLabels": {
			"app": "elasticsearch-master"
		  }
		},
		"replicas": 1,
		"podManagementPolicy": "Parallel",
		"updateStrategy": {
		  "type": "RollingUpdate"
		},
		"volumeClaimTemplates": [
		  {
			"metadata": {
			  "name": "elasticsearch-master"
			},
			"spec": {
			  "accessModes": [
				"ReadWriteOnce"
			  ],
			  "resources": {
				"requests": {
				  "storage": "15Gi"
				}
			  },
			  "storageClassName": "standard"
			}
		  }
		],
		"template": {
		  "metadata": {
			"name": "elasticsearch-master",
			"labels": {
			  "release": "camunda",
			  "chart": "elasticsearch",
			  "app": "elasticsearch-master"
			},
			"annotations": null
		  },
		  "spec": {
			"securityContext": {
			  "fsGroup": 1000,
			  "runAsUser": 1000
			},
			"automountServiceAccountToken": true,
			"affinity": {
			  "podAntiAffinity": {
				"requiredDuringSchedulingIgnoredDuringExecution": [
				  {
					"labelSelector": {
					  "matchExpressions": [
						{
						  "key": "app",
						  "operator": "In",
						  "values": [
							"elasticsearch-master"
						  ]
						}
					  ]
					},
					"topologyKey": "kubernetes.io/hostname"
				  }
				]
			  }
			},
			"terminationGracePeriodSeconds": 120,
			"volumes": null,
			"enableServiceLinks": true,
			"initContainers": [
			  {
				"name": "configure-sysctl",
				"securityContext": {
				  "runAsUser": 0,
				  "privileged": true
				},
				"image": "docker.elastic.co/elasticsearch/elasticsearch:7.17.3",
				"imagePullPolicy": "IfNotPresent",
				"command": [
				  "sysctl",
				  "-w",
				  "vm.max_map_count=262144"
				],
				"resources": {}
			  }
			],
			"containers": [
			  {
				"name": "elasticsearch",
				"securityContext": {
				  "capabilities": {
					"drop": [
					  "ALL"
					]
				  },
				  "runAsNonRoot": true,
				  "runAsUser": 1000
				},
				"image": "docker.elastic.co/elasticsearch/elasticsearch:7.17.3",
				"imagePullPolicy": "IfNotPresent",
				"readinessProbe": {
				  "exec": {
					"command": [
					  "bash",
					  "-c",
					  "set -e\n# If the node is starting up wait for the cluster to be ready (request params: \"wait_for_status=yellow&timeout=1s\" )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Elasticsearch Docker using nss < 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n  local path=\"${1}\"\n  local args=\"${2}\"\n  set -- -XGET -s\n\n  if [ \"$args\" != \"\" ]; then\n    set -- \"$@\" $args\n  fi\n\n  if [ -n \"${ELASTIC_PASSWORD}\" ]; then\n    set -- \"$@\" -u \"elastic:${ELASTIC_PASSWORD}\"\n  fi\n\n  curl --output /dev/null -k \"$@\" \"http://127.0.0.1:9200${path}\"\n}\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(http \"/\" \"-w %{http_code}\")\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" && \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=yellow&timeout=1s\" )'\n  if http \"/_cluster/health?wait_for_status=yellow&timeout=1s\" \"--fail\" ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=yellow&timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
					]
				  },
				  "failureThreshold": 3,
				  "initialDelaySeconds": 10,
				  "periodSeconds": 10,
				  "successThreshold": 3,
				  "timeoutSeconds": 5
				},
				"ports": [
				  {
					"name": "http",
					"containerPort": 9200
				  },
				  {
					"name": "transport",
					"containerPort": 9300
				  }
				],
				"resources": {
				  "limits": {
					"cpu": "1000m",
					"memory": "512M"
				  },
				  "requests": {
					"cpu": "100m",
					"memory": "512M"
				  }
				},
				"env": [
				  {
					"name": "node.name",
					"valueFrom": {
					  "fieldRef": {
						"fieldPath": "metadata.name"
					  }
					}
				  },
				  {
					"name": "cluster.initial_master_nodes",
					"value": "elasticsearch-master-0,"
				  },
				  {
					"name": "discovery.seed_hosts",
					"value": "elasticsearch-master-headless"
				  },
				  {
					"name": "cluster.name",
					"value": "elasticsearch"
				  },
				  {
					"name": "network.host",
					"value": "0.0.0.0"
				  },
				  {
					"name": "cluster.deprecation_indexing.enabled",
					"value": "false"
				  },
				  {
					"name": "ES_JAVA_OPTS",
					"value": "-Xmx1g -Xms1g"
				  },
				  {
					"name": "node.data",
					"value": "true"
				  },
				  {
					"name": "node.ingest",
					"value": "true"
				  },
				  {
					"name": "node.master",
					"value": "true"
				  },
				  {
					"name": "node.ml",
					"value": "true"
				  },
				  {
					"name": "node.remote_cluster_client",
					"value": "true"
				  },
				  {
					"name": "xpack.security.enabled",
					"value": "false"
				  }
				],
				"volumeMounts": [
				  {
					"name": "elasticsearch-master",
					"mountPath": "/usr/share/elasticsearch/data"
				  }
				]
			  }
			]
		  }
		}
	  }
	},
	"camunda-zeebe": {
	  "apiVersion": "apps/v1",
	  "kind": "StatefulSet",
	  "metadata": {
		"name": "camunda-zeebe",
		"labels": {
		  "app": "camunda-platform",
		  "app.kubernetes.io/name": "zeebe",
		  "app.kubernetes.io/instance": "camunda",
		  "app.kubernetes.io/managed-by": "Helm",
		  "app.kubernetes.io/part-of": "camunda-platform",
		  "helm.sh/chart": "zeebe-8.0.10",
		  "app.kubernetes.io/version": "8.0.0",
		  "app.kubernetes.io/component": "zeebe-broker"
		},
		"annotations": null
	  },
	  "spec": {
		"replicas": 1,
		"selector": {
		  "matchLabels": {
			"app": "camunda-platform",
			"app.kubernetes.io/name": "zeebe",
			"app.kubernetes.io/instance": "camunda",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/part-of": "camunda-platform",
			"app.kubernetes.io/component": "zeebe-broker"
		  }
		},
		"serviceName": "camunda-zeebe",
		"updateStrategy": {
		  "type": "RollingUpdate"
		},
		"podManagementPolicy": "Parallel",
		"template": {
		  "metadata": {
			"labels": {
			  "app": "camunda-platform",
			  "app.kubernetes.io/name": "zeebe",
			  "app.kubernetes.io/instance": "camunda",
			  "app.kubernetes.io/managed-by": "Helm",
			  "app.kubernetes.io/part-of": "camunda-platform",
			  "helm.sh/chart": "zeebe-8.0.10",
			  "app.kubernetes.io/version": "8.0.0",
			  "app.kubernetes.io/component": "zeebe-broker"
			},
			"annotations": null
		  },
		  "spec": {
			"imagePullSecrets": [],
			"initContainers": null,
			"containers": [
			  {
				"name": "zeebe",
				"image": "camunda/zeebe:8.0.0",
				"imagePullPolicy": "IfNotPresent",
				"env": [
				  {
					"name": "LC_ALL",
					"value": "C.UTF-8"
				  },
				  {
					"name": "K8S_NAME",
					"valueFrom": {
					  "fieldRef": {
						"fieldPath": "metadata.name"
					  }
					}
				  },
				  {
					"name": "K8S_SERVICE_NAME",
					"value": "camunda-zeebe"
				  },
				  {
					"name": "K8S_NAMESPACE",
					"valueFrom": {
					  "fieldRef": {
						"fieldPath": "metadata.namespace"
					  }
					}
				  },
				  {
					"name": "ZEEBE_BROKER_NETWORK_ADVERTISEDHOST",
					"value": "$(K8S_NAME).$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc"
				  },
				  {
					"name": "ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS",
					"value": "$(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,"
				  },
				  {
					"name": "ZEEBE_BROKER_CLUSTER_CLUSTERNAME",
					"value": "camunda-zeebe"
				  },
				  {
					"name": "ZEEBE_LOG_LEVEL",
					"value": "info"
				  },
				  {
					"name": "ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT",
					"value": "1"
				  },
				  {
					"name": "ZEEBE_BROKER_CLUSTER_CLUSTERSIZE",
					"value": "1"
				  },
				  {
					"name": "ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR",
					"value": "1"
				  },
				  {
					"name": "ZEEBE_BROKER_THREADS_CPUTHREADCOUNT",
					"value": "3"
				  },
				  {
					"name": "ZEEBE_BROKER_THREADS_IOTHREADCOUNT",
					"value": "3"
				  },
				  {
					"name": "ZEEBE_BROKER_GATEWAY_ENABLE",
					"value": "false"
				  },
				  {
					"name": "ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME",
					"value": "io.camunda.zeebe.exporter.ElasticsearchExporter"
				  },
				  {
					"name": "ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL",
					"value": "http://elasticsearch-master:9200"
				  },
				  {
					"name": "ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT",
					"value": "26501"
				  },
				  {
					"name": "ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT",
					"value": "26502"
				  },
				  {
					"name": "ZEEBE_BROKER_NETWORK_MONITORINGAPI_PORT",
					"value": "9600"
				  },
				  {
					"name": "K8S_POD_NAME",
					"valueFrom": {
					  "fieldRef": {
						"fieldPath": "metadata.name"
					  }
					}
				  },
				  {
					"name": "JAVA_TOOL_OPTIONS",
					"value": "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
				  },
				  {
					"name": "ZEEBE_BROKER_DATA_SNAPSHOTPERIOD",
					"value": "5m"
				  },
				  {
					"name": "ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK",
					"value": "0.85"
				  },
				  {
					"name": "ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK",
					"value": "0.87"
				  }
				],
				"ports": [
				  {
					"containerPort": 9600,
					"name": "http"
				  },
				  {
					"containerPort": 26501,
					"name": "command"
				  },
				  {
					"containerPort": 26502,
					"name": "internal"
				  }
				],
				"readinessProbe": {
				  "httpGet": {
					"path": "/ready",
					"port": 9600
				  },
				  "periodSeconds": 10,
				  "successThreshold": 1,
				  "timeoutSeconds": 1
				},
				"resources": {
				  "limits": {
					"cpu": "960m",
					"memory": "1920Mi"
				  },
				  "requests": {
					"cpu": "800m",
					"memory": "1200Mi"
				  }
				},
				"volumeMounts": [
				  {
					"name": "config",
					"mountPath": "/usr/local/bin/startup.sh",
					"subPath": "startup.sh"
				  },
				  {
					"name": "data",
					"mountPath": "/usr/local/zeebe/data"
				  },
				  {
					"name": "exporters",
					"mountPath": "/exporters"
				  }
				]
			  }
			],
			"volumes": [
			  {
				"name": "config",
				"configMap": {
				  "name": "camunda-zeebe",
				  "defaultMode": 484
				}
			  },
			  {
				"name": "exporters",
				"emptyDir": {}
			  }
			],
			"affinity": {
			  "podAntiAffinity": {
				"requiredDuringSchedulingIgnoredDuringExecution": [
				  {
					"labelSelector": {
					  "matchExpressions": [
						{
						  "key": "app.kubernetes.io/component",
						  "operator": "In",
						  "values": [
							"zeebe-broker"
						  ]
						}
					  ]
					},
					"topologyKey": "kubernetes.io/hostname"
				  }
				]
			  }
			}
		  }
		},
		"volumeClaimTemplates": [
		  {
			"metadata": {
			  "name": "data"
			},
			"spec": {
			  "accessModes": [
				"ReadWriteOnce"
			  ],
			  "storageClassName": null,
			  "resources": {
				"requests": {
				  "storage": "10Gi"
				}
			  }
			}
		  }
		]
	  }
	}
  }
}
